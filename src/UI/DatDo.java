/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import DAO.DatDoDAO;
import DAO.TaiKhoanDAO;
import Entity.ChiTietDonHang;
import Entity.DonHang;
import Entity.ListDoAn;
import Entity.ListDoUong;
import Utils.GlobalState;
import Utils.XImage;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ADMIN
 */
public class DatDo extends javax.swing.JFrame {

    /**
     * Creates new form DatDo
     */
    public DatDo() {
        initComponents();
        this.infoTien();
        this.infoUser();
        txtTongTien.setText("0VND");
        txtSoLuong.setText("1");
        txtSoLuong.setEditable(false);
        setFormCenter();
        this.khoaBang();
        this.preInit();
        this.changeColor();
        this.HienListDoUong();
        this.HienListDoAn();
        this.hienThiMonDauTien();
        this.displayTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        lblDatDo = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoUong = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblDoAn = new javax.swing.JTable();
        jLabel36 = new javax.swing.JLabel();
        lblTongTien = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        txtTongTien = new javax.swing.JLabel();
        btnDatDo = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        btnCong = new javax.swing.JToggleButton();
        btnTru = new javax.swing.JToggleButton();
        btnThem = new javax.swing.JButton();
        txtTenMon = new javax.swing.JLabel();
        txtGia = new javax.swing.JLabel();
        btnXoa = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDanhSach = new javax.swing.JTable();
        txtUssr = new javax.swing.JLabel();
        txtTime = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtAreaGhiChu = new javax.swing.JTextArea();
        txtTien = new javax.swing.JLabel();

        jPanel5.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/Banh_mi.jpg"))); // NOI18N

        jLabel11.setText("Bánh Mì");

        jLabel12.setText("15.000VND");

        jLabel13.setText("Số Lượng: ");

        jButton5.setText("-");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("+");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel10)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel11)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        lblDatDo.setFont(new java.awt.Font("Segoe UI", 3, 48)); // NOI18N
        lblDatDo.setText("Đặt Đồ Ăn Uống");

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblDoUong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Món", "Giá"
            }
        ));
        tblDoUong.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoUongMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDoUong);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Đặt Đồ Uống", jPanel2);

        tblDoAn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tên", "Giá"
            }
        ));
        tblDoAn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoAnMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblDoAn);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Đặt Đồ Ăn", jPanel3);

        jLabel36.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/gif_boochii.gif"))); // NOI18N

        lblTongTien.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel34.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/gif_nigga.gif"))); // NOI18N
        jLabel34.setText("Tổng Tiền:");

        txtTongTien.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N

        btnDatDo.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        btnDatDo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/eat.png"))); // NOI18N
        btnDatDo.setText("Đặt Đồ");
        btnDatDo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatDoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lblTongTienLayout = new javax.swing.GroupLayout(lblTongTien);
        lblTongTien.setLayout(lblTongTienLayout);
        lblTongTienLayout.setHorizontalGroup(
            lblTongTienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblTongTienLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel34)
                .addGroup(lblTongTienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(lblTongTienLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(184, Short.MAX_VALUE))
                    .addGroup(lblTongTienLayout.createSequentialGroup()
                        .addGap(52, 243, Short.MAX_VALUE)
                        .addComponent(btnDatDo)
                        .addGap(29, 29, 29))))
        );
        lblTongTienLayout.setVerticalGroup(
            lblTongTienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lblTongTienLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(lblTongTienLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtTongTien))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lblTongTienLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDatDo)
                .addGap(15, 15, 15))
        );

        jLabel37.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/AzelcookingnoodlesAzelmeme1-ezgif.com-video-to-gif-converter.gif"))); // NOI18N

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jLabel1.setText("Tên:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel2.setText("Giá:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel3.setText("Số Lượng:");

        btnCong.setText("+");
        btnCong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCongActionPerformed(evt);
            }
        });

        btnTru.setText("-");
        btnTru.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTruActionPerformed(evt);
            }
        });

        btnThem.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/eat.png"))); // NOI18N
        btnThem.setText("Thêm ");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        txtTenMon.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N

        txtGia.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N

        btnXoa.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/eat.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(txtTenMon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(292, 292, 292))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnTru, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCong, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtGia, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnThem)
                        .addGap(45, 45, 45))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(95, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCong)
                    .addComponent(btnTru)
                    .addComponent(txtTenMon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtGia))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnThem)
                        .addComponent(btnXoa)))
                .addGap(18, 18, 18))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tblDanhSach.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Món", "Tên Món", "Số Lượng", "Tổng Giá"
            }
        ));
        tblDanhSach.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDanhSachMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDanhSach);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 699, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(309, 309, 309))
        );

        txtUssr.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        txtUssr.setText("id");

        txtTime.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        txtTime.setText("00:00:00");

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel4.setText("Ghi chú:");

        txtAreaGhiChu.setColumns(20);
        txtAreaGhiChu.setRows(5);
        jScrollPane4.setViewportView(txtAreaGhiChu);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                    .addContainerGap(31, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        txtTien.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        txtTien.setText("69420");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(86, 86, 86)
                        .addComponent(lblDatDo)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel37)
                        .addGap(120, 120, 120))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(txtTien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtUssr)
                .addGap(327, 327, 327)
                .addComponent(txtTime)
                .addGap(348, 348, 348))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel37))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(lblDatDo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel36)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTongTien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTime)
                    .addComponent(txtUssr)
                    .addComponent(txtTien))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void displayTime() {

        Timer timer = new Timer(1000, e -> {
            LocalDateTime myDateObj = LocalDateTime.now();
            DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

            String formattedDate = myDateObj.format(myFormatObj);
            txtTime.setText(formattedDate);
        });
        timer.start();
    }

    private void khoaBang() {
    DefaultTableModel modelDoAn = (DefaultTableModel) tblDoAn.getModel();
    DefaultTableModel modelDoUong = (DefaultTableModel) tblDoUong.getModel();

    // Tạo model mới với dữ liệu cũ nhưng chặn chỉnh sửa
        DefaultTableModel newModelDoAn = new DefaultTableModel(modelDoAn.getDataVector(), getColumnNames(modelDoAn)) {
        @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho chỉnh sửa
        }
    };

        DefaultTableModel newModelDoUong = new DefaultTableModel(modelDoUong.getDataVector(), getColumnNames(modelDoUong)) {
        @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Không cho chỉnh sửa
        }
    };

    // Gán model mới vào bảng
    tblDoAn.setModel(newModelDoAn);
    tblDoUong.setModel(newModelDoUong);

    // Sửa lỗi phải click 2 lần mới chọn dòng
    tblDoAn.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    tblDoUong.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
}

// Hàm lấy tên cột từ model (KHÔNG DÙNG getColumnIdentifiers())
        private Vector<String> getColumnNames(DefaultTableModel model) {
            Vector<String> columnNames = new Vector<>();
            for (int i = 0; i < model.getColumnCount(); i++) {
            columnNames.add(model.getColumnName(i));
            }
        return columnNames;
    }
    private void hienThiMonDauTien() {                                 
    if (tblDoUong.getRowCount() > 0) { // Kiểm tra bảng có dữ liệu không
        String tenMon = tblDoUong.getValueAt(0, 0).toString(); // Lấy tên món đầu tiên
        String giaMon = tblDoUong.getValueAt(0, 1).toString(); // Lấy giá món đầu tiên
        
        txtTenMon.setText(tenMon); // Hiển thị tên lên label
        txtGia.setText(giaMon); // Hiển thị giá lên label
    }
}

    public void HienListDoUong(){
        DatDoDAO uongDAO = new DatDoDAO();
        List<ListDoUong> DoUongLst = uongDAO.ListDoUong();
        DefaultTableModel tabUong = (DefaultTableModel) this.tblDoUong.getModel();
        tabUong.setRowCount(0);
        for (ListDoUong UongDo : DoUongLst) {
            tabUong.addRow(new Object[]{
                UongDo.getTen_sp(),
                UongDo.getGia_sp()
            });
        }
    }
        public void HienListDoAn(){
        DatDoDAO anDAO = new DatDoDAO();
        List<ListDoAn> DoAnLst = anDAO.ListDoAn();
        DefaultTableModel tabAn = (DefaultTableModel) this.tblDoAn.getModel();
        tabAn.setRowCount(0);
        for (ListDoAn AnDo : DoAnLst) {
            tabAn.addRow(new Object[]{
                AnDo.getTen_sp(),
                AnDo.getGia_sp()
            });
        }
    }
    private void changeColor() {
        Timer timer = new Timer(1000, e -> {
            Random rand = new Random();
            Color randomColor = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));
            lblDatDo.setForeground(randomColor);
        });
        timer.start();
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
    try {
        // Lấy dữ liệu từ text field
        String tenMon = txtTenMon.getText().trim();
        String giaText = txtGia.getText().trim();
        String soLuongText = txtSoLuong.getText().trim();

<<<<<<< Updated upstream
        // Kiểm tra nếu chưa nhập đủ dữ liệu
        if (tenMon.isEmpty() || giaText.isEmpty() || soLuongText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!");
            return;
        }

        // Kiểm tra giá trị nhập vào có hợp lệ không
        if (!giaText.matches("\\d+") || !soLuongText.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ cho Giá và Số lượng!");
            return;
        }

        int gia = Integer.parseInt(giaText);
        int soLuongMoi = Integer.parseInt(soLuongText);

        // Kiểm tra số lượng hợp lệ
        if (soLuongMoi <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        // Lấy ID sản phẩm từ CSDL
        int idSanPham = new DatDoDAO().getIDSanPham(tenMon);
        if (idSanPham == -1) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy ID của món ăn trong cơ sở dữ liệu!");
            return;
        }

        int tongGiaMoi = gia * soLuongMoi;
        DefaultTableModel model = (DefaultTableModel) tblDanhSach.getModel();
        boolean daTonTai = false;

        // Kiểm tra xem món đã tồn tại trong bảng hay chưa
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 1).toString().equalsIgnoreCase(tenMon)) { // Nếu tên món trùng
                model.setValueAt(soLuongMoi, i, 2); // Cập nhật số lượng mới
                model.setValueAt(tongGiaMoi, i, 3); // Cập nhật tổng giá mới
                daTonTai = true;
                break; // Thoát vòng lặp vì đã cập nhật xong
            }
        }

        // Nếu món chưa tồn tại, thêm mới vào bảng
        if (!daTonTai) {
            model.addRow(new Object[]{idSanPham, tenMon, soLuongMoi, tongGiaMoi});
        }

        // Xóa dữ liệu nhập sau khi thêm/cập nhật
        txtTenMon.setText("");
        txtGia.setText("");
        txtSoLuong.setText("");
        capNhatTongTien();
        hienThiMonDauTien();
        txtSoLuong.setText("1");

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage());
    }
        }//GEN-LAST:event_btnThemActionPerformed
    
    private void btnDatDoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatDoActionPerformed
    DatDoDAO datDoDAO = new DatDoDAO(); 
    int idDonHang = datDoDAO.getCurrentDonHangID();

    // Nếu không tìm thấy đơn hàng, tạo đơn hàng mới
    if (idDonHang == -1) { 
        idDonHang = datDoDAO.taoDonHangMoi();
    }

    // Kiểm tra lại nếu vẫn không có ID đơn hàng thì báo lỗi và dừng
    if (idDonHang == -1) {
        JOptionPane.showMessageDialog(this, "Không thể tạo đơn hàng mới!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String ghiChu = txtAreaGhiChu.getText().trim();
    int dongHienTai = tblDanhSach.getRowCount();
    StringBuilder message = new StringBuilder("Bạn đã xác nhận đặt:\n");
    int tongTien = 0;

    // Biến lưu đơn hàng mẫu
    StringBuilder donHangMau = new StringBuilder();
    donHangMau.append("Xem truoc: \n");
    donHangMau.append("Id don hang: ").append(idDonHang).append("\n");
    donHangMau.append("Danh sach mon:\n");

    // Duyệt qua danh sách món ăn trong bảng
    for (int i = 0; i < dongHienTai; i++) {
        int idMon = Integer.parseInt(tblDanhSach.getValueAt(i, 0).toString());
        String tenMon = tblDanhSach.getValueAt(i, 1).toString();
        int soLuong = Integer.parseInt(tblDanhSach.getValueAt(i, 2).toString());
        int tongGia = Integer.parseInt(tblDanhSach.getValueAt(i, 3).toString());

        message.append(String.format("%d x %s (ID: %d) %d\n", soLuong, tenMon, idMon, tongGia));
        tongTien += tongGia;

        // Thêm vào đơn hàng mẫu
        donHangMau.append(String.format("ID Mon: %d - %s | So luong: %d | Gia: %d\n", idMon, tenMon, soLuong, tongGia));
    }

    // Hiển thị tổng tiền
    message.append("Tong: ").append(tongTien);
    donHangMau.append("Tong tien: ").append(tongTien).append("\n");
    donHangMau.append("Ghi chu: ").append(ghiChu.isEmpty() ? "Khong." : ghiChu).append("\n");

    // Sout ra console đơn hàng mẫu
    System.out.println(donHangMau.toString());

    // Hiển thị hộp thoại xác nhận
    int confirm = JOptionPane.showConfirmDialog(this, message.toString(),
        "Xác nhận đặt hàng", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {
        // Thêm chi tiết đơn hàng vào CSDL
        for (int i = 0; i < dongHienTai; i++) {
            int idSanPham = Integer.parseInt(tblDanhSach.getValueAt(i, 0).toString());
            int soLuong = Integer.parseInt(tblDanhSach.getValueAt(i, 2).toString());
            int tongGia = Integer.parseInt(tblDanhSach.getValueAt(i, 3).toString());

            datDoDAO.themChiTietDonHang(idDonHang, idSanPham, soLuong, tongGia, ghiChu);
        }

        JOptionPane.showMessageDialog(this, "Cảm ơn bạn đã đặt hàng!\nVui lòng chuẩn bị tiền mặt/chuyển khoản\nkhi nhận hàng.");
    } else {
        JOptionPane.showMessageDialog(this, "Đã hủy đơn hàng.");
    }
=======
            // Kiểm tra nếu chưa nhập đủ dữ liệu
            if (tenMon.isEmpty() || giaText.isEmpty() || soLuongText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin!");
                return;
            }

            // Kiểm tra giá trị nhập vào có hợp lệ không
            if (!giaText.matches("\\d+") || !soLuongText.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập số hợp lệ cho Giá và Số lượng!");
                return;
            }

            int gia = Integer.parseInt(giaText);
            int soLuongMoi = Integer.parseInt(soLuongText);

            // Kiểm tra số lượng hợp lệ
            if (soLuongMoi <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
                return;
            }

            // Lấy ID sản phẩm từ CSDL
            int idSanPham = new DatDoDAO().getIDSanPham(tenMon);
            if (idSanPham == -1) {
                JOptionPane.showMessageDialog(this, "Không tìm thấy ID của món ăn trong cơ sở dữ liệu!");
                return;
            }

            int tongGiaMoi = gia * soLuongMoi;
            DefaultTableModel model = (DefaultTableModel) tblDanhSach.getModel();
            boolean daTonTai = false;

            // Kiểm tra xem món đã tồn tại trong bảng hay chưa
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1).toString().equalsIgnoreCase(tenMon)) { // Nếu tên món trùng
                    model.setValueAt(soLuongMoi, i, 2); // Cập nhật số lượng mới
                    model.setValueAt(tongGiaMoi, i, 3); // Cập nhật tổng giá mới
                    daTonTai = true;
                    break; // Thoát vòng lặp vì đã cập nhật xong
                }
            }

            // Nếu món chưa tồn tại, thêm mới vào bảng
            if (!daTonTai) {
                model.addRow(new Object[]{idSanPham, tenMon, soLuongMoi, tongGiaMoi});
            }

            // Xóa dữ liệu nhập sau khi thêm/cập nhật
            txtTenMon.setText("");
            txtGia.setText("");
            txtSoLuong.setText("");
            capNhatTongTien();
            hienThiMonDauTien();
            txtSoLuong.setText("1");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi: " + e.getMessage());
        }
        }//GEN-LAST:event_btnThemActionPerformed

    private void btnDatDoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatDoActionPerformed
            DatDoDAO datDoDAO = new DatDoDAO();
// Nếu không tìm thấy đơn hàng, tạo đơn hàng mới
datDoDAO.taoDonHangMoi();
int idDonHang = datDoDAO.getCurrentDonHangID();

// Kiểm tra lại nếu vẫn không có ID đơn hàng thì báo lỗi và dừng
if (idDonHang == -1) {
    JOptionPane.showMessageDialog(this, "Không thể tạo đơn hàng mới!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    return;
}

String ghiChu = txtAreaGhiChu.getText().trim();
int dongHienTai = tblDanhSach.getRowCount();
StringBuilder message = new StringBuilder("Bạn đã xác nhận đặt:\n");
int tongTienDonHang = 0;

// Biến lưu đơn hàng mẫu
StringBuilder donHangMau = new StringBuilder();
donHangMau.append("Xem truoc: \n");
donHangMau.append("Id don hang: ").append(idDonHang).append("\n");
donHangMau.append("Danh sach mon:\n");

// Duyệt qua danh sách món ăn trong bảng
for (int i = 0; i < dongHienTai; i++) {
    int idMon = Integer.parseInt(tblDanhSach.getValueAt(i, 0).toString());
    String tenMon = tblDanhSach.getValueAt(i, 1).toString();
    int soLuong = Integer.parseInt(tblDanhSach.getValueAt(i, 2).toString());
    int tongGia = Integer.parseInt(tblDanhSach.getValueAt(i, 3).toString());

    message.append(String.format("%d x %s (ID: %d) %d\n", soLuong, tenMon, idMon, tongGia));
    tongTienDonHang += tongGia;

    // Thêm vào đơn hàng mẫu
    donHangMau.append(String.format("ID Mon: %d - %s | So luong: %d | Gia: %d\n", idMon, tenMon, soLuong, tongGia));
}

// Hiển thị tổng tiền
        message.append("Tổng: ").append(tongTienDonHang);
        donHangMau.append("Tổng tiền: ").append(tongTienDonHang).append("\n");
        donHangMau.append("Ghi chú: ").append(ghiChu.isEmpty() ? "Không." : ghiChu).append("\n");
        System.out.println(donHangMau.toString());

// Hiển thị hộp thoại xác nhận
        int confirm = JOptionPane.showConfirmDialog(this, message.toString(),
            "Xác nhận đặt hàng", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
        // Lấy số tiền hiện có từ TextField
            int tienHienCo;
            try {
                tienHienCo = Integer.parseInt(txtTien.getText().trim());
            } catch (NumberFormatException e) {
             JOptionPane.showMessageDialog(this, "Lỗi: Số tiền không hợp lệ!", "Lỗi", JOptionPane.ERROR_MESSAGE);
                return;
        }
            
        int soDuSau = Integer.parseInt(txtTien.getText().trim()) - Integer.parseInt(txtTongTien.getText().trim());
        
    // Kiểm tra số tiền có đủ hay không
    if (tongTienDonHang > tienHienCo) {
        JOptionPane.showMessageDialog(this, "Không đủ tiền. Hãy nạp thêm!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Nếu đủ tiền, tiến hành thêm chi tiết đơn hàng vào CSDL
    for (int i = 0; i < dongHienTai; i++) {
        int idSanPham = Integer.parseInt(tblDanhSach.getValueAt(i, 0).toString());
        int soLuong = Integer.parseInt(tblDanhSach.getValueAt(i, 2).toString());
        int tongGia = Integer.parseInt(tblDanhSach.getValueAt(i, 3).toString());

        datDoDAO.themChiTietDonHang(idDonHang, idSanPham, soLuong, tongGia, ghiChu);
    }
        // Cập nhật số dư tài khoản vào CSDL
    String tenDangNhap = txtUssr.getText().trim(); // bạn phải có TextField tên đăng nhập
    int capNhat = DatDoDAO.capNhatSoDuTaiKhoan(tenDangNhap, soDuSau);
    if (capNhat > 0) {
        JOptionPane.showMessageDialog(this, "Đặt hàng thành công!\nSố dư còn lại: " + soDuSau);
        txtTien.setText(String.valueOf(soDuSau)); // cập nhật luôn trên giao diện
    } else {
        JOptionPane.showMessageDialog(this, "Đặt hàng thành công nhưng cập nhật số dư thất bại!", "Cảnh báo", JOptionPane.WARNING_MESSAGE);
    }

} else {
    JOptionPane.showMessageDialog(this, "Đã hủy đơn hàng.");
        }
>>>>>>> Stashed changes
    }//GEN-LAST:event_btnDatDoActionPerformed

    private void tblDoUongMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoUongMouseClicked
        tblDoUong.addMouseListener(new MouseAdapter() {
    @Override
    public void mouseClicked(MouseEvent e) {
        int selectedRow = tblDoUong.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra nếu có dòng được chọn
            String tenMon = tblDoUong.getValueAt(selectedRow, 0).toString();
            String giaMon = tblDoUong.getValueAt(selectedRow, 1).toString();
            
            txtTenMon.setText(tenMon); // Hiển thị tên món vào label
            txtGia.setText(giaMon); // Hiển thị giá món vào label
        }
    }
});
    }//GEN-LAST:event_tblDoUongMouseClicked

    private void tblDoAnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoAnMouseClicked
        tblDoAn.addMouseListener(new MouseAdapter() {
    @Override
    public void mouseClicked(MouseEvent e) {
        int selectedRow = tblDoAn.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra nếu có dòng được chọn
            String tenMon = tblDoAn.getValueAt(selectedRow, 0).toString();
            String giaMon = tblDoAn.getValueAt(selectedRow, 1).toString();
            
            txtTenMon.setText(tenMon); // Hiển thị tên món vào label
            txtGia.setText(giaMon); // Hiển thị giá món vào label
        }
    }
});
    }//GEN-LAST:event_tblDoAnMouseClicked

    private void btnTruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTruActionPerformed
    try {
        int soLuong = Integer.parseInt(txtSoLuong.getText());
        if (soLuong > 0) {
            txtSoLuong.setText(String.valueOf(soLuong - 1));
        }
    } catch (NumberFormatException ex) {
        txtSoLuong.setText("0"); // Nếu nhập sai định dạng, reset về 0
    }
    }//GEN-LAST:event_btnTruActionPerformed

    private void btnCongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCongActionPerformed
    try {
        int soLuong = Integer.parseInt(txtSoLuong.getText());
        txtSoLuong.setText(String.valueOf(soLuong + 1));
    } catch (NumberFormatException ex) {
        txtSoLuong.setText("1");
    }
    }//GEN-LAST:event_btnCongActionPerformed

    private void tblDanhSachMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDanhSachMouseClicked
        int selectedRow = tblDanhSach.getSelectedRow(); // Lấy dòng được chọn
    if (selectedRow != -1) {
        String tenMon = tblDanhSach.getValueAt(selectedRow, 0).toString(); // Cột "Tên Món"
        int soLuong = Integer.parseInt(tblDanhSach.getValueAt(selectedRow, 1).toString()); // Cột "Số Lượng"
        int tongGia = Integer.parseInt(tblDanhSach.getValueAt(selectedRow, 2).toString()); // Cột "Tổng Giá"

        // Cập nhật lên giao diện
        txtTenMon.setText(tenMon);
        txtSoLuong.setText(String.valueOf(soLuong));
        txtGia.setText(String.valueOf(tongGia / soLuong)); // Lấy giá gốc từ tổng giá
    }
    }//GEN-LAST:event_tblDanhSachMouseClicked

    private void infoUser() {
        txtUssr.setText(GlobalState.ten_dang_nhap);
    }
    private void infoTien() {
        TaiKhoanDAO tkDAO = new TaiKhoanDAO();
        
        int so_du = tkDAO.getSoDu();
        txtTien.setText(String.valueOf(so_du));
    }
    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
    int selectedRow = tblDanhSach.getSelectedRow();
    
    if (selectedRow != -1) {
        // Xóa dòng được chọn
        DefaultTableModel model = (DefaultTableModel) tblDanhSach.getModel();
        model.removeRow(selectedRow);
        
        // Cập nhật lại tổng tiền
        capNhatTongTien();
    } else {
        // Hiển thị thông báo nếu không có món nào được chọn
        JOptionPane.showMessageDialog(null, "Vui lòng chọn món cần xóa!");
    }
    }//GEN-LAST:event_btnXoaActionPerformed
    
    private void capNhatTongTien() {
    int tongTien = 0;
    DefaultTableModel model = (DefaultTableModel) tblDanhSach.getModel();

    // Duyệt qua tất cả các dòng trong bảng
    for (int i = 0; i < model.getRowCount(); i++) {
        int giaTri = Integer.parseInt(model.getValueAt(i, 3).toString()); // Cột 3 là Tổng Giá
        tongTien += giaTri;
    }

    // Hiển thị tổng tiền
    txtTongTien.setText(tongTien + " VND");
    }

    public void setFormCenter() {
        this.setLocationRelativeTo(null);
    }

    private void preInit() {
        this.setIconImage(XImage.getAppIcon());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatDo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatDo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnCong;
    private javax.swing.JButton btnDatDo;
    private javax.swing.JButton btnThem;
    private javax.swing.JToggleButton btnTru;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel lblDatDo;
    private javax.swing.JPanel lblTongTien;
    private javax.swing.JTable tblDanhSach;
    private javax.swing.JTable tblDoAn;
    private javax.swing.JTable tblDoUong;
    private javax.swing.JTextArea txtAreaGhiChu;
    private javax.swing.JLabel txtGia;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JLabel txtTenMon;
    private javax.swing.JLabel txtTien;
    private javax.swing.JLabel txtTime;
    private javax.swing.JLabel txtTongTien;
    private javax.swing.JLabel txtUssr;
    // End of variables declaration//GEN-END:variables

}
